#!/usr/bin/perl

use strict;
use warnings;

# All of these modules are included with perl - no extra dependencies
# required.
use Getopt::Long qw(:config gnu_getopt);
use File::Basename;
use List::Util qw(uniq);

# This is in libdata-dump-perl, but is only needed while debugging the
# script.
#use Data::Dump;

# global variables and defaults
my ($help, $verbose, $arch);
my $columns = &get_terminal_width;
my $output_separator = "\n";

my %opts=('verbose' => \$verbose, 'help' => \$help, 'columns' => \$columns);
#dd \%opts;

my $dpkg_info_dir   = '/var/lib/dpkg/info';
my $dlocatedb       = '/var/lib/dlocate/dlocatedb';
my $dpkg_list_file  = '/var/lib/dlocate/dpkg-list';

chomp(my $dpkg_arch = qx(dpkg --print-architecture 2>/dev/null));

GetOptions(\%opts, qw(S
                      L K
                      l s k

                      ls du
                      conf lsconf
                      man lsman
                      bin lsbin
                      dir lsdir
                      md5sum|md5-sum md5check|md5-check

                      filenames-only|filename-only|f
                      packages-only|package-only|p

                      arch|a=s

                      word|w
                      ignore-case|i
                      fixed-strings|F

                      installed-only|I

                      help|h
                      debug|d|verbose|v
                      version|V
                      columns|column|c=i
                      colour|color|C

                      zero|0|z

                      extended-regexp|E
                      basic-regexp|G
                      perl-regexp|P
                     )
          ) or die ("Error in command line arguments\n");

#dd \%opts if ($opts{debug});

# NOTE: The 'extended-regexp|E', 'basic-regexp|G', and 'perl-regexp|P'
# options are included to avoid breaking existing scripts, but they
# don't do anything.

$opts{columns} = 80 if ($opts{columns} < 80);
&usage if ($help);
&colourise_output if ($opts{colour});
$output_separator = "\0" if $opts{zero};
&dlocate_version if ($opts{version});

if    ($opts{L})        { &list_files('list', '', @ARGV) }
elsif ($opts{S})        { &search('-S', @ARGV) }
elsif ($opts{l})        { &list_packages(@ARGV) }
elsif ($opts{s})        { &show_status(@ARGV) }

elsif ($opts{k})        { &list_kernel_packages(@ARGV) }
elsif ($opts{K})        { &list_kernel_packages_verbose(@ARGV) }

elsif ($opts{ls})       { &ls_files('list', '', @ARGV) }
elsif ($opts{du})       { &du_files('list', '-f', @ARGV) }

elsif ($opts{conf})     { &list_files('conffiles', '', @ARGV) }
elsif ($opts{lsconf})   { &ls_files('conffiles', '', @ARGV) }

elsif ($opts{man})      { &list_man_pages('list','/man[^/]+/', @ARGV) }
elsif ($opts{lsman})    { &list_files('list', '/man[^/]+/', @ARGV) }

elsif ($opts{bin})      { &ls_files('list', '-x', @ARGV) }
elsif ($opts{lsbin})    { &list_files('list', '-x', @ARGV) }

elsif ($opts{dir})      { &ls_files('list', '-d', @ARGV) }
elsif ($opts{lsdir})    { &list_files('list', '-d', @ARGV) }

elsif ($opts{md5sum})   { &list_files('md5sums', '', @ARGV) }
elsif ($opts{md5check}) { &md5check(@ARGV) }

else                    { &search('', @ARGV) }; # default action
;

# --bin and --dir are new to the perl version.
# I wish I could fix the --bin/--lsbin, --dir/--lsdir, and --man/--lsman
# options, but that would break any script depending on the original behaviour
# of dlocate.  It would make much more sense for the non --ls version to
# return a list of bare filenames (either \n or \0 separated) and the --ls
# version to return the output of 'ls -ldF'... --conf/--lsconf is the only
# pair that works as it should.

sub dlocate_version {
  chomp(my $version=qx'dpkg-query -W -f \'${version}\' dlocate');
  printf "dlocate version %s\n", $version;
  exit 0
};

sub construct_pattern_string {
  # Input:
  # @_ - pattern(s) to match package or file names

  #dd \@_ if ($opts{debug});

  # If pattern is already a compiled regexp, return it
  # unchanged.
  return $0 if ($0 =~ m/^\\qr\/\(/);

  my $pattern = '(';
  # Handle -F aka --fixed-string option.
  if (defined $opts{'fixed-strings'}) {
    $pattern .= join("|", map { quotemeta } @_) . ')';
  } else {
    $pattern .= join("|", @_) . ')';
  };

  $pattern = "\\b$pattern\\b" if (defined $opts{word});

  if (defined $opts{'ignore-case'}) {
    $pattern = qr/$pattern/i;
  } else {
    $pattern = qr/$pattern/;
  };

  return $pattern;
};

sub search {
  # Input:
  # $0 - Search type ('-S' or '')
  # @_ - pattern(s) to match package names

  my $search_type = shift;

  my $pattern = &construct_pattern_string(@_);

  # don't output the diversions if we're listing only package (-p) or
  # file (-f) names, or if we're doing a filename-only search (-S).
  my $ignore_diversions = ( defined $opts{'packages-only'} ||
                            defined $opts{'filenames-only'} ||
                            $search_type eq '-S' ) ? 1 : 0;
  my %seen = ();

  #open(my $fh, "<", $dlocatedb) or die "Couldn't open $dlocatedb for read: $!\n";
  open(my $fh, "-|", 'zstdcat', $dlocatedb) or die "Couldn't open $dlocatedb for read: $!\n";

  while(<$fh>) {
    chomp;
    next if ($ignore_diversions && m/^diversion/);
    next unless m/$pattern/;
    my ($p, $f) = ();

    # split input line into package ($p) and filename ($f)
    ($p, $f) = split /: /, $_, 2;

    if (defined $opts{arch}) {
      # arch is separated from the package name by a colon
      my (undef, $a) = split /:/, $p;
      next if ( (defined $a) && ($a ne $opts{arch}) );
    };

    my $out = $_;
    if (defined $opts{'packages-only'}) {
      $out = $p;
    } elsif (defined $opts{'filenames-only'}) {
      $out = $f;
    };

    next if ($search_type eq '-S' && $f !~ m/$pattern/);
    next if ($seen{$p}++ && defined $opts{'packages-only'});
    print $out, $output_separator;
  };
  close($fh);
};

sub resolve_filename {
  # Input:
  # $0 - package name ($pkg)
  # $1 - extension to search ($ext), 'list', 'conffiles', or 'md5sum'
  # $2 - scalar ref ($$f) to return filename string

  my ($pkg, $ext, $f) = @_;

  # If the arch is specified, use the file for that arch
  # (this also works for packages with no :arch in the filename)
  my $a  = (defined($opts{arch})) ? ":$opts{arch}" : '';

  $$f = "$dpkg_info_dir/$pkg$a.$ext";

  # If that doesn't exist AND the arch HASN'T been specified on the
  # command line, try the filename with the system's default arch.
  if (! -e "$$f" && ! $arch) {
    $$f = "$dpkg_info_dir/$pkg:$dpkg_arch.$ext";
  }
}

sub get_package_files {
  # Input:
  # $0 - Array ref to store/return filenames in
  # $1 - Extension to list ($ext),  'list', 'conffiles', or 'md5sums'
  # $2 - Pattern or file test type, e.g. '/man[0-9]/' or '-f'
  # @_ - package name(s)

  my $files = shift;
  my $ext  = shift;
  my $pattern = shift;
  my $filetest = '';

  if ($pattern =~ m/^-/ ) {
    $filetest = $pattern;
    $pattern = '.';
  };

  foreach my $p (@_) {
    my $f;
    resolve_filename($p, $ext, \$f);
    print "filename = $f\n" if ($opts{debug});
    if ( -e $f ) {
      open(my $fh, "<", $f) or die "Couldn't open $f for read: $!\n";
      chomp (@{ $files } = grep /$pattern/, <$fh>);

      if ($filetest eq '-f') {  # only files
        @{ $files } =  grep { -f } @{ $files };
      };

      if ($filetest eq '-x') {  # only executables
        @{ $files } = grep { -f && -x } @{ $files };
      };

      if ($filetest eq '-d') {  # only directories
        @{ $files } = grep { -d } @{ $files };
      };

      close($fh);
    } else {
      if ($ext eq 'conffiles') {
        print STDERR "Package $p is not installed or has no conffiles.\n";
      } else {
        print STDERR "Package $p is not installed or $f is empty.\n";
      };
    }
  }
}

sub list_files {
  my @files;
  get_package_files(\@files, @_);
  print join($output_separator, @files), $output_separator;;
};

sub ls_files {
  my @files;
  get_package_files(\@files, @_);

  my $args = '-ldF';

  if ($opts{zero}) {
    # no need to run xargs if we're just printing a NUL-separated list.
    print join("\0", @files), "\0";
  } else {
    open(my $xargs, "|-", "xargs -0r ls $args") || die "Couldn't open pipe to xargs: $!\n";
    print $xargs join("\0", @files);
    close($xargs);
  };
};

sub du_files {
  my @files;
  get_package_files(\@files, @_);

  my $args = '-sck';
  open(my $xargs, "|-","xargs -0r du $args") || die "Couldn't open pipe to xargs:\n";
  print $xargs join("\0", @files );
  close($xargs);
};

sub list_man_pages {
  my @manpages;
  get_package_files(\@manpages, @_);

  foreach my $m (@manpages) {
    #my ($base, $section, $ext) = (basename($m) =~ m/^(.*)\.([^.]+)(\.gz$)/);   # matching .gz$ should work
    my ($base, $section, $ext) = (basename($m) =~ m/^(.*)\.([^.]+)(\.[^.]+$)/); # but this will work with any future compression format
    printf "%s %s\n", $section, $base;
  };
};

sub md5check {
  my @files;
  get_package_files(\@files, 'md5sums', '', @_);

  # Digest::MD5 version
  # This is about half as fast as piping to md5sum -c (as the original
  # shell version of dlocate did). This is only really noticable on a
  # handful of huge packages like texlive-fonts-extra with over 100K files
  # (10.3 seconds vs 5.9 seconds for piping to md5sum)
  #
  # For oxygen-icon-theme, a package with 6300 files, this algo takes 0.22
  # seconds.  The original shell pipe to md5sum version took 0.14 seconds.
  #
  # The median number of files in a package is around 180, so performance
  # probably doesn't matter.  And this lets us handle md5 check failures in
  # perl (TODO).

  use Digest::MD5 qw(md5_hex);
  foreach (@files) {
    my ($hash, $file) = split;
    $file =~ s:^:/:;
    open(my $fh, "<", "$file");
    my $digest = md5_hex(<$fh>);
    close($fh);
    if ($hash eq $digest) {
      print "$file: OK\n";
    }
  }
};

sub get_packages {
  # Input:
  # $0 - Array ref to store/return package names in
  #      This is an AoH, with 'status', 'package', 'version', and 'desc'
  #      fields.
  #
  # @_ - pattern(s) to match package names

  my $packages = shift;

  my $pattern = &construct_pattern_string(@_);

  open(my $fh, "<", $dpkg_list_file) or die "Couldn't open $dpkg_list_file for read: $!\n";
  while(<$fh>) {
    chomp;
    next unless m/$pattern/;

    my ($status, $package, $version, $desc) = split /\t/;
    next if (defined($opts{'installed-only'}) && $status !~ m/^.i/);

    if (defined $opts{arch}) {
      my ($v,$a) = split /:/, $version, 2;

      # The version string might have had an epoch in it.  If so,
      # split it again and put the epoch back the version string
      if ($a =~ /:/) {
        my $v2;
        ($v2,$a) = split /:/, $a, 2 if ($a =~ /:/);
        $v = "$v:$v2";
      };

      next unless $a eq $opts{arch};
    };

    push @{ $packages }, { status => $status, package => $package,
                           version => $version, desc => $desc };
  };
  close($fh);
}

sub list_packages {
  # Input:
  # @_ - pattern(s) to match package names

  my @packages;
  &get_packages(\@packages, @_);

  return unless @packages;

  if (defined $opts{'packages-only'}) {
    print join($output_separator, (map { $_->{package} } @packages) ), $output_separator;
    exit;
  };

  my $fieldw = int(($columns - 24) / 4);
  my $fieldd = ($columns - $fieldw * 2 - 9);

  my $hfmt = "%3s-%-${fieldw}.${fieldw}s-%-${fieldw}.${fieldw}s-%-${fieldd}.${fieldd}s\n";
  (my $bfmt = $hfmt) =~ s/-%/ %/g;

  print "hfmt=$hfmt" if $opts{debug};
  print "bfmt=$bfmt" if $opts{debug};

  # print header and ruler
  my $header = <<__EOF__;
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
__EOF__

  $header .= sprintf "||/ %-${fieldw}s %-${fieldw}s %s\n", qw(Name Version Description);
  $header .= sprintf $hfmt, '+++', '=' x $fieldw, '=' x $fieldw, '=' x $fieldd;

  print $header;

  foreach my $p (@packages) {
    my $out = sprintf $bfmt, $p->{status}, $p->{package}, $p->{version}, $p->{desc};
    $out =~ s/ +$//;  # strip trailing spaces
    print $out;
  };
};

sub get_terminal_width {
  # From perldoc -q "screen size"
  require 'sys/ioctl.ph';
  die "no TIOCGWINSZ" unless defined &TIOCGWINSZ;
  open(TTY, "+</dev/tty") or die "No tty: $!";
  my $winsize;
  unless (ioctl(TTY, &TIOCGWINSZ, $winsize='')) {
    die sprintf "$0: ioctl TIOCGWINSZ (%08x: $!)\n", &TIOCGWINSZ;
  }
  my ($height, $width, $xpixel, $ypixel) = unpack('S4', $winsize);
  return $width;
};

sub colourise_output {
  return unless (defined $opts{l} or defined $opts{s} or defined $opts{K});
  return unless (-t STDOUT);       # no colour when piping or redirecting.
  return unless -x '/usr/bin/spc'; # no colour unless supercat is installed

  my $opt = '';
  if    (defined $opts{l}) { $opt = 'l' }
  if    (defined $opts{K}) { $opt = 'l' }
  elsif (defined $opts{s}) { $opt = 's' };
  return unless $opt;

  my %spc_files = (l => 'spcrc-dpkg-l', s => 'spcrc-package');
  my $conf = '';
  # Check for existence of supercat conf files in this order, return the first one found:
  foreach my $dir (qw(. $ENV{HOME}/.spcrc /usr/share/dlocate /etc/supercat)) {
    if (-f "$dir/$spc_files{$opt}") {
      $conf = "$dir/$spc_files{$opt}";
      last;
    }
  };

  if (-f "$conf") {
    # Change stdout to be a pipe to supercat
    open(STDOUT, '|-', "spc -c $conf");
  } else {
    warn "Colourisation not possible, couldn't find config file '$conf' for supercat.\n";
  };
};

sub show_status {
  foreach my $p (@_) {

    print qx(grep-status -P -X '$p');
    my $result = $?;

    if ($result) {
      chomp (my @provided_by         = qx(grep-status -F Provides '$p' -a -F Status installed -ns Package:));
      chomp (my @available_providers = qx(grep-available -F Provides '$p' -ns Package:));

      #chomp(@provided_by, @available_providers);
      @provided_by = sort {$a cmp $b} uniq @provided_by;
      @available_providers = sort {$a cmp $b} uniq @available_providers;

      if (@available_providers) {
        printf "Package: %s (virtual package, currently provided by: %s)\n", $p, join(" ",@provided_by) if (@provided_by);
        printf "X-Available-Providers: %s\n\n", join(" ", @available_providers);
      } else {
         print "Package $p does not exist.\n";
      };

    };
  };
};

sub get_kernel_packages {
  # Input:
  # @_ - pattern(s) to match package names
  #my $module_packages = '-dkms';
  chomp(my @module_packages = qx'grep-status -P -s Package -n -e \'[- ](module-assistant|dkms)([, ]|$)\'');
  @module_packages = grep { ! m/^(dh-dkms|module-assistant|dkms)$/ } @module_packages;
  my $module_packages = join("|",@module_packages);

  my $linux_packages = '(linux-(image|source|headers|doc|debug|kbuild|perf|support|tools|manual|config)|gnumach-(image|common|dev))';

  my $kernel_pattern = "($linux_packages|$module_packages)";
  $kernel_pattern = qr($kernel_pattern);

  my $user_pattern = &construct_pattern_string(@_);

  print "kernel_pattern = $kernel_pattern\n" if ($opts{debug});;
  print "user_pattern = $user_pattern\n" if ($opts{debug});;

  my @packages = ();
  $opts{'installed-only'} = 1;
  &get_packages(\@packages, $kernel_pattern);
  my @package_names = grep { m/$user_pattern/ } map { $_->{package} } @packages;

  #dd \@package_names if ($opts{debug});
  return @package_names;
}

sub list_kernel_packages {
  # Input:
  # @_ - pattern(s) to match package names
  print join($output_separator, &get_kernel_packages(@_)), $output_separator;
}

sub list_kernel_packages_verbose {
  # Input:
  # @_ - pattern(s) to match package names
  &list_packages(&get_kernel_packages(@_));
}

sub usage() {
printf <<__EOF__;
Usage: dlocate [option...] [command] [PATTERN...]

Commands:
  none         PATTERN   List records that match either package or files names
  -S           PATTERN   List records that match filenames (dpkg -S)

  -L           package   List all files in package
  -l           package   Perl RE-enhanced emulation of 'dpkg -l'
  -s           package   Print package's status

  --ls         package   'ls -ldF' of all files in package
  --du         package   'du -sck' of all files in package
  --conf       package   List conffiles in package
  --lsconf     package   'ls -ldF' of conffiles in package
  --md5sum     package   List package's md5sums (if any)
  --md5check   package   Check package's md5sums (if any)
  --man        package   List package's man pages (if any)
  --lsman      package   List full path/filenames of man pages
  --lsbin      package   List full path/filenames of executable files
  --lsdir      package   List only the directories in package

  -k                     List installed kernel & related packages
  -K                     detailed list of installed kernel & related packages

  --                     Stop processing commands and options.  Remainder of
                         command-line is filename(s) or package-name(s)


The -l, and -S commands are approximately the same as the equivalent dpkg
options except that the search is performed using regular expressions
rather than fixed strings.

Search options:

  -a, --arch [arch]       Limit search to packages for one architecture

  -f, --filename-only     Strip 'package: ' prefix from search output
  -p, --package-only      Output package names only when searching

  -0, -z, --zero          NUL-separated output for searches and --ls* commands

Regular Expression Options:

  -F, --fixed-strings   Apply quotemeta() to search patterns
  -w, --word-regexp     Restrict matches to whole words
  -i, --ignore-case     Case-insensitive match

Miscellaneous Options:

  -h, --help              Display this help message and exit.
  -V, --version           Display dlocate's version number and exit.

  -c, --columns [cols]    Set COLUMN width.  Without -c, dlocate defaults to
                          using the entire terminal line width.

  -C, --colour, --color   Colourise -l or -s output
                            (requires supercat to be installed)
__EOF__
exit 0;
};
__END__
# Obsolete options (only perl regexps now)
#
#  -E, --extended-regexp
#  -G, --basic-regexp
#  -P, --perl-regexp
